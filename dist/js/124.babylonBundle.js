(self.webpackChunkbabylonjs_typescript_webpack_simple_scene=self.webpackChunkbabylonjs_typescript_webpack_simple_scene||[]).push([[124],{6124:(e,n,a)=>{"use strict";a.r(n),a.d(n,{OceanMaterial:()=>i});var t=a(6612),r=a(5454);const o=a.p+"9c85eca814352b70dd5242dd178d6d9c.jpg";var i=function(){function e(e,n){var a,r;this._wavesGenerator=null,this._depthRenderer=e,this._scene=n,this._camera=null!==(r=null===(a=n.activeCameras)||void 0===a?void 0:a[0])&&void 0!==r?r:n.activeCamera,this._foamTexture=new t.Texture(o,this._scene),this._startTime=(new Date).getTime()/1e3}return e.prototype.setWavesGenerator=function(e){this._wavesGenerator=e},e.prototype.readMaterialParameter=function(e,n){var a=new t.Color3;for(var r in e._newUniformInstances){var o=r.split("-"),i=o[0],c=o[1],s=e._newUniformInstances[r];if(c===n)return"vec3"===i&&(s=s,a.copyFromFloats(s.x,s.y,s.z),a.toGammaSpaceToRef(a),s=a.toHexString()),s}return null},e.prototype.updateMaterialParameter=function(e,n,a){var r=new t.Vector3;for(var o in e._newUniformInstances){var i=o.split("-"),c=i[0];if(i[1]===n)return"vec3"===c&&(a=(a=t.Color3.FromHexString(a)).toLinearSpaceToRef(a),r.copyFromFloats(a.r,a.g,a.b),a=r),void(e._newUniformInstances[o]=a)}},e.prototype.getMaterial=function(e,n,a){return void 0===a&&(a=!1),o=this,i=void 0,s=function(){var o,i,c,s=this;return function(e,n){var a,t,r,o,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;i;)try{if(a=1,t&&(r=2&o[0]?t.return:o[0]?t.throw||((r=t.return)&&r.call(t),0):t.next)&&!(r=r.call(t,o[1])).done)return r;switch(t=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,t=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){i.label=o[1];break}if(6===o[0]&&i.label<r[1]){i.label=r[1],r=o;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(o);break}r[2]&&i.ops.pop(),i.trys.pop();continue}o=n.call(e,i)}catch(e){o=[6,e],t=0}finally{a=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}}(this,(function(l){switch(l.label){case 0:return a?[3,1]:((o=new r.B_("oceanMat"+(e?"1":"0")+(n?"1":"0"),this._scene)).metallic=0,o.roughness=.311,o.forceIrradianceInFragment=!0,i=new t.Vector3(.011126082368383245,.05637409755197975,.09868919754109445),o.AddUniform("_Color","vec3",i),o.AddUniform("_MaxGloss","float",.91),o.AddUniform("_RoughnessScale","float",.0044),o.AddUniform("_LOD_scale","float",7.13),o.AddUniform("_FoamColor","vec3",new t.Vector3(1,1,1)),o.AddUniform("_FoamScale","float",2.4),o.AddUniform("_ContactFoam","float",1),o.AddUniform("_FoamBiasLOD0","float",.84),o.AddUniform("_FoamBiasLOD1","float",1.83),o.AddUniform("_FoamBiasLOD2","float",2.72),o.AddUniform("_SSSColor","vec3",new t.Vector3(.1541919,.8857628,.990566)),o.AddUniform("_SSSStrength","float",.15),o.AddUniform("_SSSBase","float",-.261),o.AddUniform("_SSSScale","float",4.7),o.AddUniform("lightDirection","vec3",""),o.AddUniform("_WorldSpaceCameraPos","vec3",""),o.AddUniform("LengthScale0","float",this._wavesGenerator.lengthScale[0]),o.AddUniform("LengthScale1","float",this._wavesGenerator.lengthScale[1]),o.AddUniform("LengthScale2","float",this._wavesGenerator.lengthScale[2]),o.AddUniform("_Displacement_c0","sampler2D",this._wavesGenerator.getCascade(0).displacement),o.AddUniform("_Derivatives_c0","sampler2D",this._wavesGenerator.getCascade(0).derivatives),o.AddUniform("_Turbulence_c0","sampler2D",this._wavesGenerator.getCascade(0).turbulence),o.AddUniform("_Displacement_c1","sampler2D",this._wavesGenerator.getCascade(1).displacement),o.AddUniform("_Derivatives_c1","sampler2D",this._wavesGenerator.getCascade(1).derivatives),o.AddUniform("_Turbulence_c1","sampler2D",this._wavesGenerator.getCascade(1).turbulence),o.AddUniform("_Displacement_c2","sampler2D",this._wavesGenerator.getCascade(2).displacement),o.AddUniform("_Derivatives_c2","sampler2D",this._wavesGenerator.getCascade(2).derivatives),o.AddUniform("_Turbulence_c2","sampler2D",this._wavesGenerator.getCascade(2).turbulence),o.AddUniform("_Time","float",0),o.AddUniform("_CameraDepthTexture","sampler2D",this._depthRenderer.getDepthMap()),o.AddUniform("_CameraData","vec4",new t.Vector4(this._camera.minZ,this._camera.maxZ,this._camera.maxZ-this._camera.minZ,0)),o.AddUniform("_FoamTexture","sampler2D",this._foamTexture),c=[],e&&c.push("#define MID"),n&&c.push("#define CLOSE"),o.Vertex_Definitions("\n                "+c.join("\n")+"\n\n                varying vec2 vWorldUV;\n                varying vec2 vUVCoords_c0;\n                varying vec2 vUVCoords_c1;\n                varying vec2 vUVCoords_c2;\n                varying vec3 vViewVector;\n                varying vec4 vLodScales;\n                varying vec4 vClipCoords;\n                varying float vMetric;\n            "),o.Fragment_Definitions("\n                "+c.join("\n")+"\n\n                varying vec2 vWorldUV;\n                varying vec2 vUVCoords_c0;\n                varying vec2 vUVCoords_c1;\n                varying vec2 vUVCoords_c2;\n                varying vec3 vViewVector;\n                varying vec4 vLodScales;\n                varying vec4 vClipCoords;\n                varying float vMetric;\n            "),o.Vertex_After_WorldPosComputed("\n                vWorldUV = worldPos.xz;\n            \n                vViewVector = _WorldSpaceCameraPos - worldPos.xyz;\n                float viewDist = length(vViewVector);\n            \n                float lod_c0 = min(_LOD_scale * LengthScale0 / viewDist, 1.0);\n                float lod_c1 = min(_LOD_scale * LengthScale1 / viewDist, 1.0);\n                float lod_c2 = min(_LOD_scale * LengthScale2 / viewDist, 1.0);\n                    \n                vec3 displacement = vec3(0.);\n                float largeWavesBias = 0.;\n            \n                vUVCoords_c0 = vWorldUV / LengthScale0;\n                vUVCoords_c1 = vWorldUV / LengthScale1;\n                vUVCoords_c2 = vWorldUV / LengthScale2;\n            \n                displacement += texture2D(_Displacement_c0, vUVCoords_c0).xyz * lod_c0;\n                largeWavesBias = displacement.y;\n            \n                #if defined(MID) || defined(CLOSE)\n                    displacement += texture2D(_Displacement_c1, vUVCoords_c1).xyz * lod_c1;\n                #endif\n                #if defined(CLOSE)\n                    displacement += texture2D(_Displacement_c2, vUVCoords_c2).xyz * lod_c2;\n                #endif\n    \n                worldPos.xyz += displacement;\n\n                vLodScales = vec4(lod_c0, lod_c1, lod_c2, max(displacement.y - largeWavesBias * 0.8 - _SSSBase, 0) / _SSSScale);\n            "),o.Vertex_MainEnd("\n                vClipCoords = gl_Position;\n                vMetric = gl_Position.z;\n            "),o.Fragment_Before_Lights("\n                vec4 derivatives = texture2D(_Derivatives_c0, vUVCoords_c0);\n                #if defined(MID) || defined(CLOSE)\n                    derivatives += texture2D(_Derivatives_c1, vUVCoords_c1) * vLodScales.y;\n                #endif\n                #if defined(CLOSE)\n                    derivatives += texture2D(_Derivatives_c2, vUVCoords_c2) * vLodScales.z;\n                #endif\n\n                vec2 slope = vec2(derivatives.x / (1.0 + derivatives.z), derivatives.y / (1.0 + derivatives.w));\n                normalW = normalize(vec3(-slope.x, 1.0, -slope.y));\n\n                #if defined(CLOSE)\n                    float jacobian = texture2D(_Turbulence_c0, vUVCoords_c0).x + texture2D(_Turbulence_c1, vUVCoords_c1).x + texture2D(_Turbulence_c2, vUVCoords_c2).x;\n                    jacobian = min(1.0, max(0.0, (-jacobian + _FoamBiasLOD2) * _FoamScale));\n                #elif defined(MID)\n                    float jacobian = texture2D(_Turbulence_c0, vUVCoords_c0).x + texture2D(_Turbulence_c1, vUVCoords_c1).x;\n                    jacobian = min(1.0, max(0.0, (-jacobian + _FoamBiasLOD1) * _FoamScale));\n                #else\n                    float jacobian = texture2D(_Turbulence_c0, vUVCoords_c0).x;\n                    jacobian = min(1.0, max(0.0, (-jacobian + _FoamBiasLOD0) * _FoamScale));\n                #endif\n\n                vec2 screenUV = vClipCoords.xy / vClipCoords.w;\n                screenUV = screenUV * 0.5 + 0.5;\n                float backgroundDepth = texture2D(_CameraDepthTexture, screenUV).r * _CameraData.y;\n                float surfaceDepth = vMetric;\n                float depthDifference = max(0.0, (backgroundDepth - surfaceDepth) - 0.1);\n                float foam = texture2D(_FoamTexture, vWorldUV * 0.5 + _Time).r;\n                jacobian += _ContactFoam * saturate(max(0.0, foam - depthDifference) * 5.0) * 0.9;\n    \n                surfaceAlbedo = mix(vec3(0.0), _FoamColor, jacobian);\n\n                vec3 viewDir = normalize(vViewVector);\n                vec3 H = normalize(-normalW + lightDirection);\n                float ViewDotH = pow5(saturate(dot(viewDir, -H))) * 30.0 * _SSSStrength;\n                vec3 color = mix(_Color, saturate(_Color + _SSSColor.rgb * ViewDotH * vLodScales.w), vLodScales.z);\n    \n                float fresnel = dot(normalW, viewDir);\n                fresnel = saturate(1.0 - fresnel);\n                fresnel = pow5(fresnel);\n            "),o.Fragment_Custom_MetallicRoughness("\n                float distanceGloss = mix(1.0 - metallicRoughness.g, _MaxGloss, 1.0 / (1.0 + length(vViewVector) * _RoughnessScale));\n                metallicRoughness.g = 1.0 - mix(distanceGloss, 0.0, jacobian);\n            "),o.Fragment_Before_FinalColorComposition("\n                finalEmissive = mix(color * (1.0 - fresnel), vec3(0.0), jacobian);\n            "),o.Fragment_Before_FragColor("\n                //finalColor = vec4(toGammaSpace((normalW + vec3(1.)) / vec3(2.)), 1.);\n                //finalColor = vec4(vec3(surfaceDepth), 1.);\n            "),o.onBindObservable.add((function(){var e,n,a,t,r,i,c=((new Date).getTime()/1e3-s._startTime)/10;null===(e=o.getEffect())||void 0===e||e.setVector3("_WorldSpaceCameraPos",s._camera.position),null===(n=o.getEffect())||void 0===n||n.setTexture("_Turbulence_c0",s._wavesGenerator.getCascade(0).turbulence),null===(a=o.getEffect())||void 0===a||a.setTexture("_Turbulence_c1",s._wavesGenerator.getCascade(1).turbulence),null===(t=o.getEffect())||void 0===t||t.setTexture("_Turbulence_c2",s._wavesGenerator.getCascade(2).turbulence),null===(r=o.getEffect())||void 0===r||r.setFloat("_Time",c),null===(i=o.getEffect())||void 0===i||i.setVector3("lightDirection",s._scene.lights[0].direction)})),[2,new Promise((function(e){s._foamTexture.isReady()?e(o):s._foamTexture.onLoadObservable.addOnce((function(){e(o)}))}))]);case 1:return[4,t.NodeMaterial.ParseFromSnippetAsync("R4152I#24",this._scene)];case 2:(o=l.sent()).getInputBlockByPredicate((function(e){return"LOD_scale"===e.name})).value=7.13,o.getInputBlockByPredicate((function(e){return"LengthScale0"===e.name})).value=this._wavesGenerator.lengthScale[0],o.getInputBlockByPredicate((function(e){return"Roughness"===e.name})).value=.311,o.getInputBlockByPredicate((function(e){return"metallic"===e.name})).value=0,o.getBlockByName("Displacement_c0").texture=this._wavesGenerator.getCascade(0).displacement,o.getBlockByName("Derivatives_c0").texture=this._wavesGenerator.getCascade(0).derivatives,o.build(),l.label=3;case 3:return[2,o]}}))},new((c=void 0)||(c=Promise))((function(e,n){function a(e){try{r(s.next(e))}catch(e){n(e)}}function t(e){try{r(s.throw(e))}catch(e){n(e)}}function r(n){var r;n.done?e(n.value):(r=n.value,r instanceof c?r:new c((function(e){e(r)}))).then(a,t)}r((s=s.apply(o,i||[])).next())}));var o,i,c,s},e}()}}]);
//# sourceMappingURL=124.babylonBundle.js.map
"use strict";(self.webpackChunkbabylonjs_ocean_demo=self.webpackChunkbabylonjs_ocean_demo||[]).push([[817],{1817:(e,a,n)=>{n.r(a),n.d(a,{OceanMaterial:()=>o});var t=n(6925),r=n(6462);class o{constructor(e,a){var n,r;this._wavesGenerator=null,this._depthRenderer=e,this._scene=a,this._camera=null!==(r=null===(n=a.activeCameras)||void 0===n?void 0:n[0])&&void 0!==r?r:a.activeCamera,this._foamTexture=new t.Texture("https://assets.babylonjs.com/environments/waterFoam_circular_mask.png",this._scene),this._startTime=(new Date).getTime()/1e3}setWavesGenerator(e){this._wavesGenerator=e}readMaterialParameter(e,a){const n=new t.Color3;for(const t in e._newUniformInstances){const[r,o]=t.split("-");let i=e._newUniformInstances[t];if(o===a)return"vec3"===r&&(n.copyFromFloats(i.x,i.y,i.z),n.toGammaSpaceToRef(n),i=n.toHexString()),i}return null}updateMaterialParameter(e,a,n){const r=new t.Vector3;for(const o in e._newUniformInstances){const[i,c]=o.split("-");if(c===a)return"vec3"===i&&(n=(n=t.Color3.FromHexString(n)).toLinearSpaceToRef(n),r.copyFromFloats(n.r,n.g,n.b),n=r),void(e._newUniformInstances[o]=n)}}async getMaterial(e,a,n=!1){let o;if(!n){o=new r.B_("oceanMat"+(e?"1":"0")+(a?"1":"0"),this._scene),o.metallic=0,o.roughness=.311,o.forceIrradianceInFragment=!0;const n=new t.Vector3(.011126082368383245,.05637409755197975,.09868919754109445);o.AddUniform("_Color","vec3",n),o.AddUniform("_MaxGloss","float",.91),o.AddUniform("_RoughnessScale","float",.0044),o.AddUniform("_LOD_scale","float",7.13),o.AddUniform("_FoamColor","vec3",new t.Vector3(1,1,1)),o.AddUniform("_FoamScale","float",2.4),o.AddUniform("_ContactFoam","float",1),o.AddUniform("_FoamBiasLOD0","float",.84),o.AddUniform("_FoamBiasLOD1","float",1.83),o.AddUniform("_FoamBiasLOD2","float",2.72),o.AddUniform("_SSSColor","vec3",new t.Vector3(.1541919,.8857628,.990566)),o.AddUniform("_SSSStrength","float",.15),o.AddUniform("_SSSBase","float",-.261),o.AddUniform("_SSSScale","float",4.7),o.AddUniform("lightDirection","vec3",""),o.AddUniform("_WorldSpaceCameraPos","vec3",""),o.AddUniform("LengthScale0","float",this._wavesGenerator.lengthScale[0]),o.AddUniform("LengthScale1","float",this._wavesGenerator.lengthScale[1]),o.AddUniform("LengthScale2","float",this._wavesGenerator.lengthScale[2]),o.AddUniform("_Displacement_c0","sampler2D",this._wavesGenerator.getCascade(0).displacement),o.AddUniform("_Derivatives_c0","sampler2D",this._wavesGenerator.getCascade(0).derivatives),o.AddUniform("_Turbulence_c0","sampler2D",this._wavesGenerator.getCascade(0).turbulence),o.AddUniform("_Displacement_c1","sampler2D",this._wavesGenerator.getCascade(1).displacement),o.AddUniform("_Derivatives_c1","sampler2D",this._wavesGenerator.getCascade(1).derivatives),o.AddUniform("_Turbulence_c1","sampler2D",this._wavesGenerator.getCascade(1).turbulence),o.AddUniform("_Displacement_c2","sampler2D",this._wavesGenerator.getCascade(2).displacement),o.AddUniform("_Derivatives_c2","sampler2D",this._wavesGenerator.getCascade(2).derivatives),o.AddUniform("_Turbulence_c2","sampler2D",this._wavesGenerator.getCascade(2).turbulence),o.AddUniform("_Time","float",0),o.AddUniform("_CameraDepthTexture","sampler2D",this._depthRenderer.getDepthMap()),o.AddUniform("_CameraData","vec4",new t.Vector4(this._camera.minZ,this._camera.maxZ,this._camera.maxZ-this._camera.minZ,0)),o.AddUniform("_FoamTexture","sampler2D",this._foamTexture);const i=[];return e&&i.push("#define MID"),a&&i.push("#define CLOSE"),o.Vertex_Definitions(`\n                ${i.join("\n")}\n\n                varying vec2 vWorldUV;\n                varying vec2 vUVCoords_c0;\n                varying vec2 vUVCoords_c1;\n                varying vec2 vUVCoords_c2;\n                varying vec3 vViewVector;\n                varying vec4 vLodScales;\n                varying vec4 vClipCoords;\n                varying float vMetric;\n            `),o.Fragment_Definitions(`\n                ${i.join("\n")}\n\n                varying vec2 vWorldUV;\n                varying vec2 vUVCoords_c0;\n                varying vec2 vUVCoords_c1;\n                varying vec2 vUVCoords_c2;\n                varying vec3 vViewVector;\n                varying vec4 vLodScales;\n                varying vec4 vClipCoords;\n                varying float vMetric;\n            `),o.Vertex_After_WorldPosComputed("\n                vWorldUV = worldPos.xz;\n            \n                vViewVector = _WorldSpaceCameraPos - worldPos.xyz;\n                float viewDist = length(vViewVector);\n            \n                float lod_c0 = min(_LOD_scale * LengthScale0 / viewDist, 1.0);\n                float lod_c1 = min(_LOD_scale * LengthScale1 / viewDist, 1.0);\n                float lod_c2 = min(_LOD_scale * LengthScale2 / viewDist, 1.0);\n                    \n                vec3 displacement = vec3(0.);\n                float largeWavesBias = 0.;\n            \n                vUVCoords_c0 = vWorldUV / LengthScale0;\n                vUVCoords_c1 = vWorldUV / LengthScale1;\n                vUVCoords_c2 = vWorldUV / LengthScale2;\n            \n                displacement += texture2D(_Displacement_c0, vUVCoords_c0).xyz * lod_c0;\n                largeWavesBias = displacement.y;\n            \n                #if defined(MID) || defined(CLOSE)\n                    displacement += texture2D(_Displacement_c1, vUVCoords_c1).xyz * lod_c1;\n                #endif\n                #if defined(CLOSE)\n                    displacement += texture2D(_Displacement_c2, vUVCoords_c2).xyz * lod_c2;\n                #endif\n    \n                worldPos.xyz += displacement;\n\n                vLodScales = vec4(lod_c0, lod_c1, lod_c2, max(displacement.y - largeWavesBias * 0.8 - _SSSBase, 0) / _SSSScale);\n            "),o.Vertex_MainEnd("\n                vClipCoords = gl_Position;\n                vMetric = gl_Position.z;\n            "),o.Fragment_Before_Lights("\n                vec4 derivatives = texture2D(_Derivatives_c0, vUVCoords_c0);\n                #if defined(MID) || defined(CLOSE)\n                    derivatives += texture2D(_Derivatives_c1, vUVCoords_c1) * vLodScales.y;\n                #endif\n                #if defined(CLOSE)\n                    derivatives += texture2D(_Derivatives_c2, vUVCoords_c2) * vLodScales.z;\n                #endif\n\n                vec2 slope = vec2(derivatives.x / (1.0 + derivatives.z), derivatives.y / (1.0 + derivatives.w));\n                normalW = normalize(vec3(-slope.x, 1.0, -slope.y));\n\n                #if defined(CLOSE)\n                    float jacobian = texture2D(_Turbulence_c0, vUVCoords_c0).x + texture2D(_Turbulence_c1, vUVCoords_c1).x + texture2D(_Turbulence_c2, vUVCoords_c2).x;\n                    jacobian = min(1.0, max(0.0, (-jacobian + _FoamBiasLOD2) * _FoamScale));\n                #elif defined(MID)\n                    float jacobian = texture2D(_Turbulence_c0, vUVCoords_c0).x + texture2D(_Turbulence_c1, vUVCoords_c1).x;\n                    jacobian = min(1.0, max(0.0, (-jacobian + _FoamBiasLOD1) * _FoamScale));\n                #else\n                    float jacobian = texture2D(_Turbulence_c0, vUVCoords_c0).x;\n                    jacobian = min(1.0, max(0.0, (-jacobian + _FoamBiasLOD0) * _FoamScale));\n                #endif\n\n                vec2 screenUV = vClipCoords.xy / vClipCoords.w;\n                screenUV = screenUV * 0.5 + 0.5;\n                float backgroundDepth = texture2D(_CameraDepthTexture, screenUV).r * _CameraData.y;\n                float surfaceDepth = vMetric;\n                float depthDifference = max(0.0, (backgroundDepth - surfaceDepth) - 0.5);\n                float foam = texture2D(_FoamTexture, vWorldUV * 0.5 + _Time * 2.).r;\n                jacobian += _ContactFoam * saturate(max(0.0, foam - depthDifference) * 5.0) * 0.9;\n    \n                surfaceAlbedo = mix(vec3(0.0), _FoamColor, jacobian);\n\n                vec3 viewDir = normalize(vViewVector);\n                vec3 H = normalize(-normalW + lightDirection);\n                float ViewDotH = pow5(saturate(dot(viewDir, -H))) * 30.0 * _SSSStrength;\n                vec3 color = mix(_Color, saturate(_Color + _SSSColor.rgb * ViewDotH * vLodScales.w), vLodScales.z);\n    \n                float fresnel = dot(normalW, viewDir);\n                fresnel = saturate(1.0 - fresnel);\n                fresnel = pow5(fresnel);\n            "),o.Fragment_Custom_MetallicRoughness("\n                float distanceGloss = mix(1.0 - metallicRoughness.g, _MaxGloss, 1.0 / (1.0 + length(vViewVector) * _RoughnessScale));\n                metallicRoughness.g = 1.0 - mix(distanceGloss, 0.0, jacobian);\n            "),o.Fragment_Before_FinalColorComposition("\n                finalEmissive = mix(color * (1.0 - fresnel), vec3(0.0), jacobian);\n            "),o.Fragment_Before_FragColor("\n                //finalColor = vec4(toGammaSpace((normalW + vec3(1.)) / vec3(2.)), 1.);\n                //finalColor = vec4(vec3(surfaceDepth), 1.);\n            "),o.onBindObservable.add((()=>{var e,a,n,t,r,i;const c=((new Date).getTime()/1e3-this._startTime)/10;null===(e=o.getEffect())||void 0===e||e.setVector3("_WorldSpaceCameraPos",this._camera.position),null===(a=o.getEffect())||void 0===a||a.setTexture("_Turbulence_c0",this._wavesGenerator.getCascade(0).turbulence),null===(n=o.getEffect())||void 0===n||n.setTexture("_Turbulence_c1",this._wavesGenerator.getCascade(1).turbulence),null===(t=o.getEffect())||void 0===t||t.setTexture("_Turbulence_c2",this._wavesGenerator.getCascade(2).turbulence),null===(r=o.getEffect())||void 0===r||r.setFloat("_Time",c),null===(i=o.getEffect())||void 0===i||i.setVector3("lightDirection",this._scene.lights[0].direction)})),new Promise((e=>{this._foamTexture.isReady()?e(o):this._foamTexture.onLoadObservable.addOnce((()=>{e(o)}))}))}return o=await t.NodeMaterial.ParseFromSnippetAsync("R4152I#24",this._scene),o.getInputBlockByPredicate((e=>"LOD_scale"===e.name)).value=7.13,o.getInputBlockByPredicate((e=>"LengthScale0"===e.name)).value=this._wavesGenerator.lengthScale[0],o.getInputBlockByPredicate((e=>"Roughness"===e.name)).value=.311,o.getInputBlockByPredicate((e=>"metallic"===e.name)).value=0,o.getBlockByName("Displacement_c0").texture=this._wavesGenerator.getCascade(0).displacement,o.getBlockByName("Derivatives_c0").texture=this._wavesGenerator.getCascade(0).derivatives,o.build(),o}}}}]);
//# sourceMappingURL=817.a8bab4cc22115398a000.js.map